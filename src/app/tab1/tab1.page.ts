import { Component } from '@angular/core';

@Component({
  selector: 'app-tab1',
  templateUrl: 'tab1.page.html',
  styleUrls: ['tab1.page.scss']
})

export class Tab1Page {

  numeralMap = { M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 }
  romanButtonMap = [{ name: "I", state: true }, { name: "V", state: true }, { name: "X", state: true }, { name: "L", state: true }, { name: "C", state: true }, { name: "D", state: true }, { name: "M", state: true }];
  romanNumersArray = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];

  keyPressString = ""; // stores the keypresses
  keysPressedArray: Array<string> = []; // exploded version of the current String Array
  
  result = 0; // stores the calculated result

  constructor() { }

  /* Handles click event generated by roman numeral buttons */
  async processClick(s: string): Promise<void> {
    if (s === 'clear') { // clear the result
      this.result = 0;
      this.keyPressString = '';
      this.toggleButtonState(null); // reset button states
      return;
    }

    if (s === 'backspace') {
      let currentChar = '';
      this.result = 0;
      this.keyPressString = this.keyPressString.substr(0, this.keyPressString.length - 1);
      currentChar = this.keyPressString.charAt(this.keyPressString.length - 1);
      this.calculateResult(currentChar);
      return;
    }

    this.keyPressString += s; // creating keypress buffer
    this.keysPressedArray = this.keyPressString.split('');
    this.calculateResult(s);

    return;
  }

  /* Calculates the result and sets button state */
  async calculateResult(s: string) {
    await this.romanToInt()
      .then(async (result) => {
        this.result = await result;
      })
      .finally(() => {
        this.toggleButtonState(s);
      });
    return;
  }

  /* A boundary issues exist where after the third I there cannot be more I's added */
  __handleBoundaryIssues() {
    if (this.keyPressString.length > 3) {
      // ends input after III
      if (this.keyPressString.substring(this.keyPressString.length - 3, this.keyPressString.length) === "III") {
        return true;
      }
    }
  }

  /* toggles button state based on the last button pressed */

  toggleButtonState(s: string): void {


    if(!s){
      this.__setActive(this.romanNumersArray);
      return;
    }

    if (this.__handleBoundaryIssues()) {
      this.__setActive(this.romanNumersArray);
      return;
    }

    const validNextNumerals = this.__getValidNumeralList();
    this.__setActive(validNextNumerals);

    return;
  }

  /* returns a string array of valid numerals following on the previous numbers pressed */

  __getValidNumeralList(): Array<string> {

    if (this.keysPressedArray.length === 0) {
      return this.romanNumersArray;
    }

    // sets the numeral before the last numeral or returns null if none
    const leadingNumeral = this.keysPressedArray.length > 1 ? this.keysPressedArray[ this.keysPressedArray.length - 2 ] : null;
    // sets the last numeral pressed
    const lastNumeral = this.keysPressedArray[this.keysPressedArray.length - 1];
    let templateArray: Array<string> = [];

    console.log(leadingNumeral);
    console.log(lastNumeral);

    // if keyPressString is longer that 1 character, evalute leading character
    switch (lastNumeral) {
      case 'I':
        templateArray = ['I', 'V', 'X'];
      case 'V':
        templateArray = ['I'];
      case 'X':
        templateArray = ['I', 'V', 'X', 'L', 'C'];
      case 'L':
        templateArray = ['I', 'V', 'X'];
      case 'C':
        templateArray = this.romanNumersArray;
      case 'D':
        templateArray = ['I', 'V', 'X', 'L', 'C', 'D'];
      case 'M':
        templateArray = this.romanNumersArray;
    }

    return !leadingNumeral ? templateArray : this.__evaluate(lastNumeral, leadingNumeral, templateArray.reverse());


    // ['I', 'V', 'X', 'L', 'C', 'D', 'M']
  }

  /* helper for getValidNumeralList*/

  __evaluate(lastNumeral: string, leadingNumeral: string, templateArray: Array<string>) {
    const negators = "IXC";
    let validArray: Array<string> = [];
    // checks if the last numeral entered is potentially a detractor then sets the previous character as comparitor
    const comparitor = negators.indexOf(lastNumeral) === -1 ? lastNumeral : leadingNumeral;
    console.log("comparitor: "+comparitor);
    templateArray.forEach(element => {

      console.log(this.numeralMap[element]);
      console.log(this.numeralMap[comparitor]);
      
      if (this.numeralMap[element] <= this.numeralMap[comparitor]) {
        console.log("pushing: "+element);
        validArray.push(element);
      }
    });

    console.log("Valid Array: ");
    console.log(validArray);
    return validArray;
  }

  /* helper function for toggleButtonState */

  __setActive(strArr: Array<string>) {
    
    this.romanButtonMap.forEach(btnItem => {
      btnItem.state = false;
      console.log(btnItem);
      for (let i = 0; i < strArr.length; i++) {
        if ((btnItem.name === strArr[i])) {
          btnItem.state = true;
        }
      }
    });
  }



  /* 
  * Converts a string of Roman numerals to their integer value 
  * by matching each element in the string
  * to an element in the table object map and returns value 
  */

  romanToInt(): Promise<number> {

    return new Promise((resolve, reject) => {

      if (!this.keyPressString) {
        resolve(0);
        return;
      }

      const strArr = this.keyPressString.split('');
      let currentChar = '';
      let previousChar = '';
      let result = 0;
      let value = 0;


      if (strArr.length === 1) {
        resolve(this.numeralMap[strArr[0]]);
        return;
      }

      for (let i = 0; i < strArr.length; i++) {
        //if the next roman numeral is larger subtract the first value and add the combined numeral value
        if (i > 0 && this.numeralMap[strArr[i]] > this.numeralMap[strArr[i - 1]]) {
          currentChar = strArr[i];
          previousChar = strArr[i - 1];
          if (previousChar === 'I' || previousChar === 'X' || previousChar === 'C') {
            value = (this.numeralMap[currentChar]) - (2*(this.numeralMap[previousChar]));
            console.log("value = this.numeralMap[currentChar]) - (this.numeralMap[previousChar]");
            console.log(value + '=' + (this.numeralMap[currentChar]) + '-' + (this.numeralMap[previousChar]));
            result += value;
          }
        } else {
          value = this.numeralMap[strArr[i]];
          result += value;
        }
      }

      resolve(result);
    });

  }


}
