import { Component } from '@angular/core';

@Component({
  selector: 'app-tab2',
  templateUrl: 'tab2.page.html',
  styleUrls: ['tab2.page.scss']
})
export class Tab2Page {
  numeralMap = { M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 };
  integerBtnMap = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
  
  
  keyPressString = ""; // stores the keypresses
  result = "0"; // stores the calculated result 

  constructor() { 
    
  }

  /* A boundary issues exist where after the third I there cannot be more I's added */
  handleBoundaryIssues(){
    if(this.keyPressString.length > 3){
      console.log(this.keyPressString.substring(this.keyPressString.length - 3, this.keyPressString.length));
      // ends input after III
      if(this.keyPressString.substring(this.keyPressString.length - 4, this.keyPressString.length - 1) === "III"){
        return true;
      }
    }
  }


  /* Handles click event generated by roman numeral buttons */

  processClick(s: number | string): void {
    
    if (s === 'clear') { // clear the result
      this.result = '';
      this.keyPressString = '';
      return;
    }

    if (s === 'backspace') {
      this.result = '';
      this.keyPressString = this.keyPressString.substr(0, this.keyPressString.length - 1);
      this.result = this.intToRoman();
      return;
    }

    if((+(this.keyPressString + s )) > 3000){ // Scope limit reached
      this.result = "Limit Reached";
      return;
    } 

    this.keyPressString += s + '';

    this.result = this.intToRoman();
    return;
  }

  /*
  * Converts a string of integer numbers to their roman numeral value
  */

  intToRoman(){
    let num = +this.keyPressString;
    let result = '';
  
    for (let key in this.numeralMap) {
      result += key.repeat(Math.floor(num / this.numeralMap[key]));
      num = (num % this.numeralMap[key]);
    }
  
    return result;
  }

}
